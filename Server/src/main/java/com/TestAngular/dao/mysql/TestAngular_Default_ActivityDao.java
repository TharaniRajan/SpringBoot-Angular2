package com.TestAngular.dao.mysql;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.Column;
import javax.persistence.Query;
import javax.persistence.Transient;
import javax.sound.midi.SysexMessage;
import javax.sql.DataSource;
import javax.transaction.Transactional;


import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.FlushModeType;
import javax.persistence.PersistenceContext;
import javax.persistence.PersistenceUnitUtil;
import javax.transaction.Transactional;
import javax.persistence.Query;


import javax.annotation.Resource;
import javax.sql.DataSource;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Repository;
import org.apache.log4j.*;



 import com.TestAngular.domain.core.TestAngular;import com.TestAngular.domain.core.TeUser;

/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
 * build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/
@Transactional
@Repository("TestAngular_Default_ActivityDao")
public class TestAngular_Default_ActivityDao   {

	//private Log log = LogFactory.getLog(getClass());
	private static Logger log = Logger.getLogger(TestAngular_Default_ActivityDao.class.getName());

	@Value("${create_TestAngular.sql}")
	private String create_TestAngular;
	@Value("${search_for_update_TestAngular.sql}")
	private String search_for_update_TestAngular;
	@Value("${update_TestAngular.sql}")
	private String update_TestAngular;
	@Value("${delete_TestAngular.sql}")
	private String delete_TestAngular;
	@Value("${get_all_TestAngular.sql}")
	private String get_all_TestAngular;
	@Value("${search_TestAngular.sql}")
	private String search_TestAngular;


    @PersistenceContext
	private EntityManager entityManager;



	// auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform fetch operation of  TestAngular noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_TestAngular object will return
	*@throws Exception
	*/

	public TestAngular testangular_search_for_update(long id, TeUser user) throws Exception {
		  log.setLevel(Level.INFO);
	      log.info("testangular_search_for_update Dao started operation!");

		try{

			Query result =  entityManager.
			createNativeQuery(search_for_update_TestAngular,TestAngular.class)

			.setParameter("id", id);;

			ArrayList<TestAngular> TestAngular_list =	(ArrayList<TestAngular>)result.getResultList();

			if(TestAngular_list  == null){

			log.error("testangular_search_for_update Dao throws exception :" + "no TestAngular found" );
			}
			log.info("Object returned from testangular_search_for_update  Dao method !");
			return (TestAngular) TestAngular_list.get(0);

		}catch(Exception e){

			//new Exception(e.toString());  // this needs to be changed
			log.error("testangular_search_for_update Dao throws exception : "+e.toString());

		}
		return null;


	}

	// auths not ready at this time

	/**
	*
	*The purpose of Dao method is to get list of  TestAngular noun from  database
	*
	*
	*@return List of TestAngular object will return
	*@throws Exception
	*/

	public ArrayList<TestAngular> get_all_testangular() throws Exception {
		  log.setLevel(Level.INFO);
	      log.info("get_all_testangular Dao started operation!");

		try{

			Query result =  entityManager.
			createNativeQuery(get_all_TestAngular,TestAngular.class)

;

			ArrayList<TestAngular> TestAngular_list =	(ArrayList<TestAngular>)result.getResultList();

			if(TestAngular_list .size() < 1){

			log.error("get_all_testangular Dao throws exception :" + "no TestAngular found" );
				return new ArrayList<TestAngular>();
			}
			log.info("Object returned from get_all_testangular  Dao method !");
			return (ArrayList<TestAngular>) TestAngular_list;

		}catch(Exception e){

			//new Exception(e.toString());  // this needs to be changed
			log.error("get_all_testangular Dao throws exception : "+e.toString());

		}
		return null;


	}

	// auths not ready at this time

	/**
	*
	*The purpose of Dao method is to search a value in  TestAngular table from  database based on given inputs
	*
	*
	*@return 
	*@throws Exception
	*/

	public ArrayList<TestAngular> search_testangular(String  name, String  address) throws Exception {
		  log.setLevel(Level.INFO);
	      log.info("search_testangular Dao started operation!");

		try{

			Query result =  entityManager.
			createNativeQuery(search_TestAngular,TestAngular.class)

			.setParameter("name", name.equals("%%") ? name:name.concat("%"))
			.setParameter("address", address.equals("%%") ? address:address.concat("%"))
;

			ArrayList<TestAngular> TestAngular_list =	(ArrayList<TestAngular>)result.getResultList();

			if(TestAngular_list  == null){

			log.error("search_testangular Dao throws exception :" + "null" );
			}
			log.info("Object returned from search_testangular  Dao method !");
			return (ArrayList<TestAngular>) TestAngular_list;

		}catch(Exception e){

			//new Exception(e.toString());  // this needs to be changed
			log.error("search_testangular Dao throws exception : "+e.toString());

		}
		return null;


	}



	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform save operation of  TestAngular noun into database
	*@param TestAngular
	*@param user
	*@return TestAngular object will return
	*@throws Exception
	*/

	@Transactional
	public TestAngular create_testangular(TestAngular TestAngular, TeUser user) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("create_testangular Dao started operation!");//dhina updateverb

		try{
			Query query = entityManager
					.createNativeQuery(create_TestAngular)
			.setParameter("name", TestAngular.getName())
			.setParameter("address", TestAngular.getAddress())
			.setParameter("created_by", user == null ? 0:user.getId())
			.setParameter("updated_by", user == null ? 0:user.getId())
;

			int insertedId = query.executeUpdate();
					String lastIndex="select last_insert_id()";
					Query sql = entityManager.createNativeQuery(lastIndex);
					BigInteger new_id = (BigInteger) sql.getSingleResult();
					TestAngular.setId(new_id.longValue());
					System.out.println("create data---"+insertedId);

			log.info("Object returned from create_testangular  Dao method !");

			return TestAngular;

		}catch(Exception e){

			//System.out.println("DAOException: " + e.toString());
			log.error(" Dao method (create_testangular) throws Exception : "+e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform update operation of  TestAngular noun into database
	*@param TestAngular
	*@param user
	*@return the_TestAngular object will return
	*@throws Exception
	*/

	@Transactional
	public TestAngular update_testangular(TestAngular TestAngular, TeUser user) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("update_testangular Dao started operation!");//dhina updateverb

		try{
			Query query = entityManager
					.createNativeQuery(update_TestAngular)
			.setParameter("id", TestAngular.getId())
			.setParameter("name", TestAngular.getName())
			.setParameter("address", TestAngular.getAddress())
			.setParameter("updated_by", user == null ? 0:user.getId())
;

			query.executeUpdate();

			log.info("Object returned from update_testangular  Dao method !");

			return TestAngular;

		}catch(Exception e){

			//System.out.println("DAOException: " + e.toString());
			log.error(" Dao method (update_testangular) throws Exception : "+e.toString());

		}
		return null;



	}

	//auths not ready at this time

	/**
	*
	*The purpose of Dao method is to perform delete operation of  TestAngular noun from  database based on given noun id
	*@param  id
	*@param user
	*@return the_TestAngular id deleted based on id
	*@throws Exception
	*/

	@Transactional
	public String  delete_testangular(long id, TeUser user) throws Exception {

	 	  log.setLevel(Level.INFO);
	      log.info("delete_testangular Dao started operation!");//dhina updateverb

		try{
			Query query = entityManager
					.createNativeQuery(delete_TestAngular)
			.setParameter("id", id);

			query.executeUpdate();

			log.info("Object returned from delete_testangular  Dao method !");

			return "{\"status\":\"success\"}";

		}catch(Exception e){

			//System.out.println("DAOException: " + e.toString());
			log.error(" Dao method (delete_testangular) throws Exception : "+e.toString());

		}
		return null;



	}




}