package com.TestAngular.controller;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.log4j.*;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RequestBody;

import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;
import com.wordnik.swagger.annotations.ApiResponse;
import com.wordnik.swagger.annotations.ApiResponses;


import com.TestAngular.domain.core.TestAngular;

import com.TestAngular.config.TestAngularSwaggerUIConstants;

import com.TestAngular.service.TestAngular_Default_ActivityService;



/**
 *
 * @author Geppetto Generated Code</br>
 * Date Created: </br>
 * @since  </br>
   build:   </p>
 *
 * code was generated by the Geppetto System </br>
 * Gepppetto system Copyright - Geppetto LLC 2014 - 2015</br>
 * The generated code is free to use by anyone</p>
 *
 *
 *
*/

@Api(value = "/TestAngular_Default_Activity", description = "TestAngular_Default_Activity of TestAngular_Default_Activity",produces = "application/json")
@CrossOrigin
@Controller("TestAngular_Default_ActivityController")
@RequestMapping("/TestAngular_Default_Activity")
public class TestAngular_Default_ActivityController  extends TeBaseController implements TestAngularSwaggerUIConstants {

private static Logger log = Logger.getLogger(TestAngular_Default_ActivityController.class.getName());

	private TestAngular_Default_ActivityService TestAngular_Default_Activity_service;


	public TestAngular_Default_ActivityService get_TestAngular_Default_Activity_service() {
		return TestAngular_Default_Activity_service;
	}


	@Resource(name="TestAngular_Default_ActivityService")
	public void set_TestAngular_Default_Activity_service(TestAngular_Default_ActivityService TestAngular_Default_Activity_service) {
		this.TestAngular_Default_Activity_service = TestAngular_Default_Activity_service;
	}




	//auths not ready at this time
	/**
	*The purpose of this method is to perform save operation of  TestAngular noun into database
	* @param the_TestAngular
	*@return TestAngular object will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/create_TestAngular", httpMethod = "POST",notes = "creates a noun of TestAngular",response = TestAngular.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = TestAngularSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = TestAngularSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = TestAngularSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = TestAngularSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = TestAngularSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.POST,value = "/create_TestAngular" ,headers="Accept=application/json")
    @ResponseBody
	public TestAngular create_TestAngular(@RequestBody TestAngular the_TestAngular) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("create_TestAngular controller started operation!");

		TestAngular a_TestAngular;

		a_TestAngular = TestAngular_Default_Activity_service.create_testangular(the_TestAngular, super.getUser());

		log.info("Object returned from create_TestAngular method !");

		return a_TestAngular;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform update operation of  TestAngular noun into database
	*@param the_TestAngular
	*@return TestAngularobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/update_TestAngular", httpMethod = "PUT",notes = "updates a noun of TestAngular",response = TestAngular.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = TestAngularSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = TestAngularSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = TestAngularSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = TestAngularSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = TestAngularSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.PUT,value = "/update_TestAngular" ,headers="Accept=application/json")
    @ResponseBody
	public TestAngular update_TestAngular(@RequestBody TestAngular the_TestAngular) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("update_TestAngular controller started operation!");

		TestAngular a_TestAngular;

		a_TestAngular = TestAngular_Default_Activity_service.update_testangular(the_TestAngular, super.getUser());

		log.info("Object returned from update_TestAngular method !");

		return a_TestAngular;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform fetch operation of  TestAngular noun from  database based on given noun id
	*@param TestAngular_id
	*@return TestAngularobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/search_for_update_TestAngular/{TestAngular_id}", httpMethod = "GET",notes = "updates a noun of TestAngular",response = TestAngular.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = TestAngularSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = TestAngularSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = TestAngularSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = TestAngularSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = TestAngularSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/search_for_update_TestAngular/{TestAngular_id}" ,headers="Accept=application/json")
    @ResponseBody
	public TestAngular search_for_update_TestAngular(@PathVariable("TestAngular_id")long TestAngular_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("search_for_update_TestAngular controller started operation!");

		TestAngular the_TestAngular = new TestAngular();

		the_TestAngular = TestAngular_Default_Activity_service.testangular_search_for_update(TestAngular_id, super.getUser());

		log.info("Object returned from search_for_update_TestAngular method !");

		return the_TestAngular;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to perform delete operation of  TestAngular noun from  database based on given noun id
	*@param TestAngular_id
	*@return TestAngularobject will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/delete_TestAngular/{TestAngular_id}", httpMethod = "DELETE",notes = "deletes a noun of TestAngular",response = TestAngular.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = TestAngularSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = TestAngularSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = TestAngularSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = TestAngularSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = TestAngularSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.DELETE,value = "/delete_TestAngular/{TestAngular_id}" ,headers="Accept=application/json")
    @ResponseBody
	public String  delete_TestAngular(@PathVariable("TestAngular_id")long TestAngular_id) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("delete_TestAngular controller started operation!");

		String service_return_msg = "";

		service_return_msg = TestAngular_Default_Activity_service.delete_testangular(TestAngular_id, super.getUser());

		log.info("Object returned from delete_TestAngular method !");

		return service_return_msg;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to get list of  TestAngular noun from  database
	*
	*@return List of TestAngular objects will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/get_all_TestAngular", httpMethod = "GET",notes = "special search that gets all values of TestAngular",response = TestAngular.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = TestAngularSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = TestAngularSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = TestAngularSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = TestAngularSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = TestAngularSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/get_all_TestAngular" ,headers="Accept=application/json")
    @ResponseBody
	public List<TestAngular> get_all_TestAngular() throws Exception {

		log.setLevel(Level.INFO);
	    log.info("get_all_TestAngular controller started operation!");

		List<TestAngular> TestAngular_list = new ArrayList<TestAngular>();

		TestAngular_list = TestAngular_Default_Activity_service.get_all_testangular();

		log.info("Object returned from get_all_TestAngular method !");

		return TestAngular_list;


	}


	//auths not ready at this time
	/**
	*The purpose of this method is to search a value in  TestAngular table from  database based on given inputs
	*@param address
	*@return List of TestAngular objects will return
	*@throws Exception
	*
	*
	*/


	@ApiOperation(value = "/search_TestAngular", httpMethod = "GET",notes = "searches a noun of TestAngular",response = TestAngular.class)
	@ApiResponses(value = {
		@ApiResponse(code = 200, message = TestAngularSwaggerUIConstants.SUCCESS),
	    @ApiResponse(code = 404, message = TestAngularSwaggerUIConstants.NOT_FOUND),
	    @ApiResponse(code = 500, message = TestAngularSwaggerUIConstants.INTERNAL_SERVER_ERROR),
	    @ApiResponse(code = 400, message = TestAngularSwaggerUIConstants.BAD_REQUEST),
	    @ApiResponse(code = 412, message = TestAngularSwaggerUIConstants.PRE_CONDITION_FAILED) })


	@RequestMapping(method = RequestMethod.GET,value = "/search_TestAngular" ,headers="Accept=application/json")
    @ResponseBody
	public List<TestAngular> search_TestAngular(@RequestParam(required = false, value = "name", defaultValue = "%%") String name,@RequestParam(required = false, value = "address", defaultValue = "%%") String address) throws Exception {

		log.setLevel(Level.INFO);
	    log.info("search_TestAngular controller started operation!");

		List<TestAngular> TestAngular_list = new ArrayList<TestAngular>();

		TestAngular_list = TestAngular_Default_Activity_service.search_testangular(name,address);

		log.info("Object returned from search_TestAngular method !");

		return TestAngular_list;


	}




}